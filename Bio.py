__version__ = (3, 1, 0)

#           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
#           ‚ñë‚ñë‚ñà‚ñà‚ñà‚ïî‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë
#           ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ïö‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë
#           ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
#                              –ù–ï ¬© Copyright 2022
#                             https://t.me/zeticsce              


# developer of Num: @trololo_1
# meta developer: @zeticsce
from .. import loader, utils  # noqa
import asyncio
import contextlib
import pytz
import re
re._MAXCACHE = 3000
import telethon
from telethon.tl.types import MessageEntityTextUrl, Message
from telethon.tl.functions.users import GetFullUserRequest
import json as JSON
from telethon.errors.rpcerrorlist import FloodWaitError
from datetime import datetime, date, time
import logging
import types
from ..inline.types import InlineCall

import random
import subprocess
import string, pickle

def validate_text(text: str):
    txt = text.replace("<u>", "").replace("</u>", "").replace("<i>", "").replace("</i>", "").replace("<b>", "").replace("</b>", "").replace("<s>", "").replace("</s>", "").replace("<tg-spoiler>", "").replace("</tg-spoiler><s>", "")
    return txt

@loader.tds
class BioMod(loader.Module):
    """
–í–∞—à–∞ –≤—Ç–æ—Ä–∞—è —Ä—É–∫–∞ –≤ –±–∏–æ–≤–æ–π–Ω–∞—Ö)
    """
    strings = {
        
        "name": "Bio",
        
        "not_reply": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ—Ç —Ä–µ–ø–ª–∞—è.",
        
        "not_args": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.",
        
        "nolink": "<emoji document_id=5197248832928227386>üò¢</emoji> –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∂–µ—Ä—Ç–≤—É.",

        "hueta": "ü§î –ß—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?",
        
        "r.save":   
            "<emoji document_id=5212932275376759608>ü¶†</emoji> –ñ–µ—Ä—Ç–≤–∞ <b><code>{}</code></b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
            "<b>‚ò£Ô∏è +{}{}</b> –±–∏–æ-–æ–ø—ã—Ç–∞.",
        "auto.save":   
            "<emoji document_id=5212932275376759608>ü¶†</emoji> –ñ–µ—Ä—Ç–≤–∞ <b><code>{}</code></b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
            "<b>‚ò£Ô∏è {}+{}</b> –±–∏–æ-–æ–ø—ã—Ç–∞.",        
        "search":
            "<emoji document_id=5212932275376759608>‚úÖ</emoji> –ñ–µ—Ä—Ç–≤–∞ <code>{}</code> –ø—Ä–∏–Ω–æ—Å–∏—Ç:\n"
            "<b>‚ò£Ô∏è +{} –±–∏–æ-–æ–ø—ã—Ç–∞.</b>\n"
            "üìÜ –î–∞—Ç–∞: <i>{}</i>",
        
        "nf": "<emoji document_id=5215273032553078755>‚ùé</emoji> –ñ–µ—Ä—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
        
        "no_user": "<emoji document_id=5215273032553078755>‚ùé</emoji> user {} don't exist.",

        "nous": "<emoji document_id=5215273032553078755>‚ùé</emoji> –ñ–µ—Ä—Ç–≤–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",

        "anf": "<emoji document_id=5215329773366025981>ü§î</emoji> –∞ –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å?..",

        "aicmd":
            "<b>ü•∑üèª</b> <a href='tg://openmessage?user_id={}'>{}</a>\n"
            "<b>üÜî:</b> <code>@{}</code>",
        "myid": "<b>My üÜî:</b> <code>@{}</code>",
        

        "guidedov":    
            "<b>‚ùî –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–≤–µ—Ä–∫—É:</b>\n"
            "\n<b>{0}</b>  <code>–±–µ–π</code> | <code>–∫—É—Å</code>[—å–∞–π–Ω–∏] | <code>–∑–∞—Ä–∞–∑–∏</code>[—Ç—å—Ç—å] " # üîΩ
            "| <code>–µ–±</code>[–Ω–∏–∞–∂—à—å] | <code>—É–µ–±</code>[–∂–∏–∞–æ—à—Ç—å] [1-10] (@id|@user|link)"
            "\n<b>{0}</b>  <code>—Ü–µ–Ω</code>[–∞—É] | <code>–≤—á</code>[–µ–∫]  <i>(—Ü–µ–Ω–∞ –≤–∞–∫—Ü–∏–Ω—ã)</i>"
            "\n<b>{0}</b>  <code>–≤–∞–∫</code>[—Ü–∏–Ω–∞—É] | <code>–ª–µ—á</code>[–∏—Å—å] | <code>—Ö–∏</code>[–ª–ª—å—Å—è–π–∏–Ω–≥] | <code>–ª–µ–∫</code>[–∞—Ä—Å—Ç–≤–æ]"
            "\n<b>{0}</b>  <code>–∂–µ—Ä—Ç–≤</code>[—ã–∞—É] | <code>–µ–∂</code>[–∞—É]"
            "\n<b>{0}</b>  <code>–±–æ–ª</code>[–µ–∑—å–Ω–∏]"
            "\n<b>{0}</b>  <code>#–ª–∞–±</code>[—É–∞] | <code>%–ª–∞–±</code>[—É–∞] | <code>/–ª–∞–±</code>[—É–∞]"
            "\n<b>{0}</b>  <code>—É–≤–µ–¥</code>[—ã–∞–æ–º–ª–µ–Ω–∏—è]  <i>(+–≤–∏—Ä—É—Å—ã)</i>"
            "\n<b>{0}</b>  <code>-–≤–∏—Ä—É—Å</code>[—ã–∞]\n\n"
            "„ÄΩÔ∏è <b>–ê–ø–≥—Ä–µ–π–¥ –Ω–∞–≤—ã–∫–æ–≤:</b>\n"
            "<b>{0}  –Ω–∞–≤—ã–∫ (0-5)</b> –∏–ª–∏\n<b>{0}  —á–µ–∫ –Ω–∞–≤—ã–∫ (0-5)</b>\n"
            "<i> –ù–∞–ø—Ä–∏–º–µ—Ä: <b>{0} –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è 4</b>\n" 
            "(—É–ª—É—á—à–∞–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —É—á—ë–Ω–Ω—ã—Ö –Ω–∞ 4 —É—Ä.)</i>\n\n"    
            "„ÄΩÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
            "üß™ –ü–∞—Ç–æ–≥–µ–Ω (<b>–ø–∞—Ç</b> [–æ–≥–µ–Ω—ã])\nüë®‚Äçüî¨ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è (<b>–∫–≤–∞–ª</b> [–∏—Ñ–∏–∫–∞—Ü–∏—è—É–ª–∞] | <b>—Ä–∞–∑—Ä–∞–±</b> [–æ—Ç–∫–∞—É])\n"
            "ü¶† –ó–∞—Ä–∞–∑–Ω–æ—Å—Ç—å (<b>–∑–∑</b> | <b>–∑–∞—Ä–∞–∑</b> [–∞–Ω–æ—Å—Ç—å–∫—É])\nüõ° –ò–º–º—É–Ω–∏—Ç–µ—Ç (<b>–∏–º–º—É–Ω</b> [–∏—Ç–µ—Ç–∫–∞—É])\n"
            "‚ò†Ô∏è –õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å (<b>–ª–µ—Ç–∞–ª</b> [—å–Ω–æ—Å—Ç—å–∫–∞—É])\nüïµÔ∏è‚Äç‚ôÇÔ∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (<b>—Å–±</b> | <b>—Å–ª—É–∂–±</b> [–∞—É] | <b>–±–µ–∑–æ–ø–∞—Å–Ω–æ</b> [—Å—Ç—å])\n\n"
            "<b>üîé –ü–æ–∏—Å–∫ –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ:</b>\n"
            "<b>{0}  –∑ [ @id ]</b> –∏–ª–∏\n"
            "<b>{0}  –∑ [ —Ä–µ–ø–ª–∞–π ]</b>\n"
            "<i>—Å–º. <code>{1}config bio</code> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.</i>",

        "dov": 
            "<b>üåò <code>{5}–î–æ–≤ —Å–µ—Ç</code> [ id|—Ä–µ–ø–ª–∞–π ]</b> --- <b>–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞.</b>\n"
            "<i>   ‚ú® –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</i>\n"
            "{0}\n\n"
            "<b>üåò <code>{5}–î–æ–≤ –Ω–∏–∫</code> –Ω–∏–∫</b> --- <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫</b>.\n <i>–ù–∞–ø—Ä–∏–º–µ—Ä: <b><code>.–î–æ–≤ –Ω–∏–∫ {3}</code></b></i>.\n"
            "<b>   üî∞ –í–∞—à –Ω–∏–∫: <code>{1}</code></b>\n\n"
            "<b>üåò <code>{5}–î–æ–≤ –ø—É—Å–∫</code></b> --- <b>–ó–∞–ø—É—Å—Ç–∏—Ç—å/–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b>.\n"
            "<b>   {2}</b>\n"
            "<i><b>–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –∫:</b></i>\n{4}",

        "zarlistHelp": 
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞—Ä–ª–∏—Å—Ç–æ–º:</b>\n\n"
            "<i>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤—Å–µ –Ω–æ–≤—ã–µ –∂–µ—Ä—Ç–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–Ω–æ—Å—è—Ç—Å—è –≤ –∑–∞—Ä–ª–∏—Å—Ç,"
            " –∫—Ä–æ–º–µ, –∫–æ–≥–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏—Ä–∏—Å–∞ –æ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –∂–µ—Ä—Ç–≤—É.</i>\n\n"
            "–®–∞–±–ª–æ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ—Ä—Ç–≤—ã:\n"
            "{0}–∑–∞—Ä @id 1.1–∫\n"
            "–∂–¥ @id 1.1–∫\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∂–µ—Ä—Ç–≤—É –∏—Å–ø–æ–ª—å–∑—É–π:\n"
            "{0}–∑–∞—Ä @id/—Ä–µ–ø–ª–∞–π —Ñ\n"
            "{1} –∑ @id/—Ä–µ–ø–ª–∞–π\n"
            "–∂–ª @id/—Ä–µ–ø–ª–∞–π\n\n"
            "–¢–∞–∫–∂–µ, –∏–Ω—Ñ—É –æ –±–æ–Ω—É—Å–µ —Å –∂–µ—Ä—Ç–≤—ã –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ä—è–¥–æ–º —Å –∏–º–µ–Ω–µ–º –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {0}–±",

        "user_rm": "‚ùé –°–∞–ø–ø–æ—Ä—Ç <b><code>{}</code></b> —É–¥–∞–ª—ë–Ω.",
        
        "user_add": "<emoji document_id=5212932275376759608>‚úÖ</emoji> –°–∞–ø–ø–æ—Ä—Ç <b><code>{}</code></b> –¥–æ–±–∞–≤–ª–µ–Ω!",
        
        "wrong_nick": "<b>üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫.</b>",
        
        "nick_add": "üî∞ –ù–∏–∫ <b>{}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        
        "dov_start": "<b><emoji document_id=5212932275376759608>‚úÖ</emoji> –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</b>",
        
        "dov_stop": "<b>‚ùé –£—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.</b>",
        
        "dov.wrong_args": 
            "<b><emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.</b>\n"
            "<i>üìù –í–≤–µ–¥–∏—Ç–µ <code>.–¥–æ–≤</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.</i>",   
        
        "wrong_id": "üëÄ –ü—Ä–∞–≤–∏–ª—å–Ω–æ üÜî –≤–≤–µ–¥–∏, –¥—É–±–∏–Ω–∞.",
        
        "ex": "‚ùé –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: <code>{}</code>",
        
        "wrong_ot-do": '<emoji document_id=5215273032553078755>‚ùå</emoji> –µ–±–ª–∞–Ω, –ò—Å–ø–æ–ª—å–∑—É–π <b>–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> —Ñ—É–Ω–∫—Ü–∏—é "–æ—Ç-–¥–æ".',
        
        "no_sargs": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.",
        
        "no_link": "<emoji document_id=5215273032553078755>‚ùå</emoji> –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
        
        "too_much_args": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ö–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ <b>–±–æ–ª—å—à–µ</b> –æ–¥–Ω–æ–≥–æ, –ª–∏–±–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è <b>–Ω–µ</b> —Å–æ –∑–Ω–∞–∫–∞ <code>@</code>",
        
        "no_zar_reply": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ù–µ—Ç —Ä–µ–ø–ª–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Ä–∏—Å–∞ –æ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏.",
        
        "empty_zar": "<emoji document_id=5215273032553078755>‚ùå</emoji> –°–ø–∏—Å–æ–∫ –∑–∞—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç.",
        
        "wrong_zar_reply": '<emoji document_id=5215273032553078755>‚ùå</emoji> –†–µ–ø–ª–∞–π <b>–Ω–µ</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Ä–∏—Å–∞ –æ –∑–∞—Ä–∞–∂–µ–Ω–∏–∏ "<b>...–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é...</b>"',
        
        "wrong_cmd": "<emoji document_id=5215273032553078755>‚ùå</emoji> –ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        
        "empty_ex": "<emoji document_id=5215273032553078755>‚ùå</emoji> C–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç.",
        
        "tids": "<b><emoji document_id=5212932275376759608>‚úÖ</emoji> Id'—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã.</b>",
        
        "tzar": "<emoji document_id=5212932275376759608>‚úÖ</emoji> –ó–∞—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.",
        
        "clrex": "‚ùé –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –æ—á–∏—â–µ–Ω.",
        
        "zar_rm": "‚ùé –ñ–µ—Ä—Ç–≤–∞ <b><code>{0}</code></b> {1}—É–¥–∞–ª–µ–Ω–∞.",
        
        "exadd": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö.",
        
        "exrm": "‚ùé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> —É–¥–∞–ª–µ–Ω.",
        
        "clrzar": "‚úÖ –ó–∞—Ä–ª–∏—Å—Ç <b>–æ—á–∏—â–µ–Ω</b>.",
        
        "guide":
            "<b>–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é BioHelper:</b>\n\n"
            "<code>{0}biohelp –¥–æ–≤</code> üëà –ü–æ–º–æ—â—å –ø–æ –¥–æ–≤–µ—Ä–∫–µ\n"
            "<code>{0}biohelp –∑–∞—Ä–ª–∏—Å—Ç</code> üëà –ü–æ–º–æ—â—å –ø–æ –∑–∞—Ä–ª–∏—Å—Ç—É"


    }
    async def client_ready(self, client, db):
        self.db = db
        self.client = client #IDS
        if not self.db.get("NumMod", "exUsers", False):
            self.db.set("NumMod", "exUsers", [])
        if not self.db.get("NumMod", "infList", False):
            self.db.set("NumMod", "infList", {})

    async def –∞–πcmd(self, message):
        """
[reply/arg]
–ü–æ–ª—É—á–∞–µ—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        reply = await message.get_reply_message()
        args = utils.get_args(message)
        if not reply:
            
            if not args:
                user = await message.client.get_entity(message.sender_id)
                link = '<a href="t.me/{}">{}</a>'.format(user.username, user.first_name) if user.username else '<a href="tg://openmessage?user_id={}">{}</a>'.format(user.id, user.first_name)
                return await message.reply(
                    f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
                    f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
                )
            user = 0
            if re.fullmatch(r"@\D\w{3,32}", args[0], flags=re.ASCII):
                user = await message.client.get_entity(args[0])
            
            elif re.fullmatch(r"@\d{4,14}", args[0], flags=re.ASCII):
                user = args[0].replace("@", "")
                user = await message.client.get_entity(int(user))

            elif re.fullmatch(r"\d{4,14}", args[0], flags=re.ASCII):
                user = await message.client.get_entity(int(args[0]))
            
            elif re.fullmatch(r"\D\w{3,32}", args[0], flags=re.ASCII):
                user = await message.client.get_entity(args[0])
            
            if not user:
                return await message.reply("—Ç—ã –≤–≤–µ–ª —Ö—É–π–Ω—é —Ä–µ–∞–ª—å–Ω–æ")

            link = '<a href="t.me/{}">{}</a>'.format(user.username, user.first_name) if user.username else '<a href="tg://openmessage?user_id={}">{}</a>'.format(user.id, user.first_name)
            return await message.reply(
                f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
                f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
            )
        if not args:
            user = await message.client.get_entity(reply.sender_id)
            link = '<a href="t.me/{}">{}</a>'.format(user.username, user.first_name) if user.username else '<a href="tg://openmessage?user_id={}">{}</a>'.format(user.id, user.first_name)
            return await message.reply(
                f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
                f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
            )

        user = 0
        if re.fullmatch(r"@\D\w{3,32}", args[0], flags=re.ASCII):
            user = await message.client.get_entity(args[0])
        
        elif re.fullmatch(r"@\d{4,14}", args[0], flags=re.ASCII):
            user = args[0].replace("@", "")
            user = await message.client.get_entity(int(user))
        elif re.fullmatch(r"\d{4,14}", args[0], flags=re.ASCII):
            user = await message.client.get_entity(int(args[0]))
        
        elif re.fullmatch(r"\D\w{3,32}", args[0], flags=re.ASCII):
            user = await message.client.get_entity(args[0])
        
        if not user:
            return await message.reply("—Ç—ã –≤–≤–µ–ª —Ö—É–π–Ω—é —Ä–µ–∞–ª—å–Ω–æ")
        link = '<a href="t.me/{}">{}</a>'.format(user.username, user.first_name) if user.username else '<a href="tg://openmessage?user_id={}">{}</a>'.format(user.id, user.first_name)
        return await message.reply(
            f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
            f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
        )

### Module Num by trololo_1
    async def –∑cmd(self, message):
        """
[arg] [arg] [arg]....
–í –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏.
(–±–µ–∑ –Ω–∏—Ö –±—å–µ—Ç –ø–æ –æ—Ç–≤–µ—Ç—É —Å 10 –ø–∞—Ç–æ–≤)
        """
        
        reply = await message.get_reply_message()
        exlist = self.db.get("NumMod", "exUsers")
        count_st = 0
        count_hf = 0
        
        if not reply or not reply and not args:
            await message.reply(
                self.strings("not_reply")
            )
            return
        
        
        list_args = []
        args = utils.get_args_raw(message)
        if not args:
            vlad = reply.sender_id
            hui = f'<code>/–∑–∞—Ä–∞–∑–∏—Ç—å 10 @{vlad}<code>\n—Å–ø–∞—Å–∏–±–æ <emoji document_id=5215327827745839526>‚ù§Ô∏è</emoji>'
            


            await message.client.send_message(message.peer_id, hui)
            return
        for i in args.split(' '):
            if '-' in i:
                ot_do = i.split('-')
                try:
                    list_args.extend(str(x) for x in range(int(ot_do[0]), int(ot_do[1]) + 1))
                except Exception:
                    await message.reply(
                        self.strings("wrong_ot-do")
                    )
                    return
            else:
                list_args.append(i)
        a = reply.text
        lis = a.splitlines()
        for start in list_args:
            for x in lis:
                if x.lower().startswith(str(start.lower())):
                    count_st = 1
                    if 'href="' in x:
                        count_hf = 1
                        del_msg = 0
                        if not del_msg:
                            await message.delete()
                        del_msg += 1
                        b = x.find('href="') + 6
                        c = x.find('">')
                        link = x[b:c]
                        if link.startswith('tg'):
                            users = '@' + link.split('=')[1]
                            if users in exlist:
                                await message.client.send_message(message.peer_id,
                                    self.strings("ex").format(
                                    users
                                    ),
                                    reply_to=reply
                                )
                            else:
                                await message.client.send_message(message.peer_id, 
                                    f'<code>/–∑–∞—Ä–∞–∑–∏—Ç—å 1 {users}</code>\n<code>/–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É</code>',
                                    reply_to=reply)
                        elif link.startswith('https://t.me'):
                            a = '@' + str(link.split('/')[3])
                            if a in exlist:
                                await message.client.send_message(message.peer_id,
                                    self.strings("ex").format(
                                    users
                                    ),
                                    reply_to=reply
                                )
                            else:
                                await message.client.send_message(message.peer_id, 
                                    f'<code>/–∑–∞—Ä–∞–∑–∏—Ç—å 1 {a}</code>\n<code>/–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É</code>',
                                    reply_to=reply)
                        else:
                            await message.reply(
                                self.strings("hueta")
                            )
                        break
            await asyncio.sleep(3.3)   
        if not count_st:
            await message.reply(
                self.strings("no_sargs")
            )
        elif not count_hf:
            await message.reply(
                self.strings("no_link")
            )
        elif len(list_args) >= 5:
            await message.reply(
                self.strings("tzar")
            )
    async def –æcmd(self, message):
        """
–ó–∞—Ä–∞–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–æ —Ä–µ–ø–ª–∞—é.
–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å @id/@user/link
        """
        
        reply = await message.get_reply_message()
        exlist = self.db.get("NumMod", "exUsers")
        err = "1"
        if not reply:
            await message.reply(
                self.strings("not_reply")
            )
            return
        json = JSON.loads(reply.to_json())
        try:
            for i in range(len(reply.entities)):
                try:
                    link = json["entities"][i]["url"]
                    if link.startswith('tg'):
                        users = '@' + link.split('=')[1]
                        if users in exlist:
                            await message.reply(
                                    self.strings("ex").format(
                                    users
                                    )
                                )
                        else:
                            await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {users}')
                    elif link.startswith('https://t.me'):
                        a = '@' + str(link.split("/")[3])
                        if a in exlist:
                            await message.reply(
                                    self.strings("ex").format(
                                    a
                                    )
                                )
                        else:
                            await message.reply(f'/–∑–∞—Ä–∞–∑–∏—Ç—å {a}')
                    else:
                        await message.reply(
                            self.strings("hueta")
                        )
                except Exception:
                    blayt = reply.raw_text[json["entities"][i]["offset"]:json["entities"][i]["offset"] + json["entities"][i]["length"]]
                    if blayt in exlist:
                        await message.reply(
                            self.strings("ex").format(
                                blayt
                                )
                            )
                    else:
                        await message.reply(f"/–∑–∞—Ä–∞–∑–∏—Ç—å {blayt}")
                await asyncio.sleep(3.3)
        
        except TypeError:
            err = "2"
            await message.edit(
                self.strings("hueta")
            )
        if err != "2":
            await message.delete()
    async def –∏—Å–∫cmd(self, message):
        """
–î–æ–±–∞–≤–ª—è–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥ .–∑ –∏ .–æ
–ò—Å–ø–æ–ª—å–∑—É–π: .–∏—Å–∫ {@user/@id/reply}
        """
        
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        exlistGet = self.db.get("NumMod", "exUsers")
        exlist = exlistGet.copy()
        if not args:
            #if reply:
            #    rid = "@" + str(reply.sender_id)


            if len(exlist) < 1:
                await message.reply(
                    self.strings("empty_zar")
                )
                return
            exsms = ''.join(f'<b>{count}.</b> <code>{i}</code>\n' for count, i in enumerate(exlist, start=1))
            await utils.answer(message, exsms)
            return
        #if reply:
        if args == 'clear':
            exlist.clear()
            self.db.set("NumMod", "exUsers", exlist)
            await message.reply(
                self.strings("clrex")
            )
            return
        if len(args.split(' ')) > 1 or args[0] != '@':
            await message.reply(
                self.strings("too_much_args")
            )
            return
        if args in exlist:
            exlist.remove(args)
            self.db.set("NumMod", "exUsers", exlist)
            await message.edit(
                self.strings("exrm").format(
                    args
                )
            )
            return
        exlist.append(args)
        self.db.set("NumMod", "exUsers", exlist)
        await message.edit(
            self.strings("exadd").format(
                args
            )
        )
    async def –∑–∞—Äcmd(self, message):
        """
–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π.
.–∑–∞—Ä {@id} {—á–∏—Å.–ª–æ} {–∞—Ä–≥}
–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: .–∑–∞—Ä {@id}

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
–∫ ->  –¥–æ–±–∞–≤–∏—Ç—å –±—É–∫–≤—É k(—Ç—ã—Å—è—á) –∫ —á–∏—Å–ª—É.
—Ñ/–æ ->  –ø–æ–∏—Å–∫ –ø–æ –∏–¥'—É/—é–∑–µ—Ä—É.
—Ä ->  –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ —Ä–µ–ø–ª–∞—é.

-backup ->  –±—ç–∫–∞–ø –∑–∞—Ä–ª–∏—Å—Ç–∞ –≤ —Ñ–∞–π–ª.
-restore ->  –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤ –∏–∑ –±—ç–∫–∞–ø–∞ –≤ –∑–∞—Ä–ª–∏—Å—Ç.
-restore --y ->  –ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∑–∞—Ä–ª–∏—Å—Ç–∞ –Ω–∞ –±—ç–∫–∞–ø.
        """
        pref = self.get_prefix()
        norm_args = utils.get_args(message)
        infList = self.db.get("NumMod", "infList")
        file_name = 'zarlistbackup.pickle'
        id = message.to_id
        reply = await message.get_reply_message()        
        args = utils.get_args_raw(message)
        infList = self.db.get("NumMod", "infList")
        timezone = "Europe/Kiev"
        vremya = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
        k = ''
        with contextlib.suppress(Exception):
            args_list = args.split(' ')
        ###
        args_backup, args_restore, args_restore_y = [
            "backup",
            "-backup",
            "-b",
            "--backup",
            "--b"],[
            "restore",
            "-restore",
            "--restore",
            "-r",
            "--r"],[
            "--y"
        ]
        if args in args_backup:
            try:
                await message.delete()
                dict_all = { 'zar': infList}
                with open(file_name, 'wb') as f:
                    pickle.dump(dict_all, f)
                return await message.client.send_file(id, file_name)
            except Exception as e:
                return await utils.answer(message, f"<b>–û—à–∏–±–∫–∞:\n</b>{e}")            

        try:
            if norm_args[0] in args_restore:
                hueta_govnokod_hikari_gay = 0
                try:
                    if norm_args[1] in args_restore_y:
                        hueta_govnokod_hikari_gay = 1
                except:
                    pass
                reply_document = ""
                try:
                    reply_document = reply.document
                except AttributeError:
                    pass
    
                try:
                    if not reply:
                        return await message.reply(
                            self.strings("not_reply")
                        )
                    if not reply_document:
                        return await utils.answer(message, f"<b>–µ–±–∞–ª–∞–π, —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª.</b>")
    
                    await reply.download_media(file_name)
                    with open(file_name, 'rb') as f:
                        data = pickle.load(f)
                    zar = data['zar']
                    result_zar = dict(infList, **zar)
                    if hueta_govnokod_hikari_gay:
                        infList.clear()
                    a = "—Å –∑–∞–º–µ–Ω–æ–π " if hueta_govnokod_hikari_gay else ""
                    self.db.set("NumMod", "infList", result_zar)
                    
                    return await utils.answer(message, f"<emoji document_id=5212932275376759608>‚úÖ</emoji> <b>–ë–µ–∫–∞–ø –∑–∞—Ä–ª–∏—Å—Ç–∞ {a}–∑–∞–≥—Ä—É–∂–µ–Ω!</b>")
                except Exception as e:
                    return await utils.answer(message, f"<b>–ø–∏–∑–¥–µ—Ü, –û—à–∏–±–∫–∞:\n</b>{e}")
        except IndexError:
            pass
        if not args:
            if not infList:
                return await message.edit(
                    self.strings("empty_zar")
                )
            sms = "üîñ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞—Ä–∞–∂–µ–Ω–∏–π:\n\n"
            sms += ''.join(
                f"‚Ä¢ {key}  +{value[0]} [{value[1]}]\n"
                    for key, value in infList.items()
            )
            return await utils.answer(message, sms)
            
        ##
        ###
        if '—Ä' in args.lower():
            reply = await message.get_reply_message()
            
            if not reply:
                return await message.reply(
                    self.strings("no_zar_reply")
                )
            ##

            trueZ = '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é'
            trueZ2 = '–ø–æ–¥–≤–µ—Ä–≥–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' # –¥–∞, —è –µ–±–ª–∞–Ω)
            text = reply.text
            if trueZ not in reply.text and trueZ2 not in reply.text:
                await message.reply(
                    self.strings("wrong_zar_reply")
                )
            else:  # ‚ò£
                try:
                    ept = ""
                    text = reply.text
                    x = text.index('‚ò£') + 4
                    count = text[x:].split(' ', maxsplit=1)[0]
                    x = text.index('user?id=') + 8
                    user = '@' + text[x:].split('"', maxsplit=1)[0]
                    infList[user] = [str(count), vremya]
                    self.db.set("NumMod", "infList", infList)
                    await message.reply(
                        self.strings("r.save").format(
                            user, count, ept
                        )
                    )
                except ValueError:
                    await message.reply(
                        self.strings("nolink")
                    )
        elif args_list[0] == "clear84561":
            infList.clear()
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("clrzar")
            )

        elif '—Ñ' in args.lower() or '–æ' in args.lower():
            zhertva = 0
            reply = await message.get_reply_message()

            if not reply:            
                zhertva = 0
                if re.fullmatch(r"@\d{3,10}", args_list[0], flags=re.ASCII):
                    zhertva = args_list[0]

                if re.fullmatch(r"@\D\w{3,32}", args_list[0], flags=re.ASCII):
                    try:
                        get_id = await message.client.get_entity(args_list[0])
                        get_id = get_id.id
                        zhertva = "@" + str(get_id)
                    except ValueError:
                        return await message.reply(
                            self.strings("no_user").format(
                                args_list[0]
                            )
                        ) 
                if not zhertva:
                    return await message.reply(
                        self.strings("wrong_cmd")
                    )
                if zhertva in infList:
                    user = infList[zhertva]
                    await message.reply(
                        self.strings("search").format(
                            zhertva, user[0], user[1]
                        )
                    )
                if zhertva not in infList:   
                    await message.reply(
                        self.strings("nf")
                    )  

            if reply: # <- –∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ñ–∏–∫—Å–∞ UnboundLocalError: local variable 'reply' ...
                rid = '@' + str(reply.sender_id)

                zhertva = "R#C*N("

                if re.fullmatch(r"@\d{3,10}", args_list[0], flags=re.ASCII):
                    zhertva = args_list[0]

                if re.fullmatch(r"@\D\w{3,32}", args_list[0], flags=re.ASCII):
                    try:
                        get_id = await message.client.get_entity(args_list[0])
                        get_id = get_id.id
                        zhertva = "@" + str(get_id)
                    except:
                        return await message.reply(
                            self.strings("no_user").format(
                                args_list
                            )
                        )                
                if zhertva in infList:
                    user = infList[zhertva]
                    await message.reply(
                        self.strings("search").format(
                            zhertva, user[0], user[1]
                        )
                    )                             
                elif rid in infList:
                    user = infList[rid]
                    await message.reply(
                        self.strings("search").format(
                            rid, user[0], user[1]
                        )
                    )              
                        
                elif rid not in infList:
                        await message.reply(
                            self.strings("nf")
                        )
        elif len(args_list) == 1 and args_list[0] in infList:
            del_zar = f"(+{infList[args_list[0]][0]}) "
            infList.pop(args_list[0])
            self.db.set("NumMod", "infList", infList)
            
            await message.reply(
                self.strings("zar_rm").format(
                    args, del_zar
                )
            )

        else:
            k = ''
            pas = 0
            try:
                user, count = str(args_list[0]), float(args_list[1])
            except Exception:
                try:
                    if "–∫" in args_list[1] or "k" in args_list[1]:
                        user = str(args_list[0])
                        args = str(args_list[1])
                        len_args = len(args_list[1])
                        count = args[:len_args-1]
                        count = float(count)
                        k += 'k'
                        pas = 1
                    else: 
                        return await message.reply(
                            self.strings("wrong_cmd")
                        )
                except: 
                    return await message.reply(
                        self.strings("wrong_cmd")
                    )                
            if re.fullmatch(r"@\D{3,32}\w{3,32}", user, flags=re.ASCII):

                get_id = await message.client.get_entity(user)
                get_id = get_id.id
                user = "@" + str(get_id)

                                  
            if '–∫' in args.lower() and pas == 0 or 'k' in args.lower() and pas == 0:
                k += "k"     
            infList[user] = [str(count) + k, vremya]
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("r.save").format(
                            user, count, k
                )
            )

    async def –¥–æ–≤cmd(self, message):
        """
{args1} {args2 OR reply}
–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        """
        
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        filter_and_users = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
        wnik = await self._client(GetFullUserRequest(message.sender_id))
        ent = wnik.users[0]
        a = self.config
        pref = self.get_prefix()
        dovs = ""
        if a["–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ"]:
            dovs += "–ª–∞–±–µ, "
        if a["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º"]:
            dovs += "–∑–∞—Ä–∞–∂–µ–Ω–∏—è–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ"]:
            dovs += "–ø—Ä–æ–∫–∞—á–∫–∞–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–ª–∏—Å—Ç—É"]:
            dovs += "–∑–∞—Ä–ª–∏—Å—Ç—É, "        
        if a["–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º"]:
            dovs += "–∂–µ—Ä—Ç–≤–∞–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º"]:
            dovs += "–±–æ–ª–µ–∑–Ω—è–º, "
        if a["–î–æ—Å—Ç—É–ø –∫ –≤–∏—Ä—É—Å–∞–º"]:
            dovs += "—É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∏—Ä—É—Å–æ–≤, "
        if a["–î–æ—Å—Ç—É–ø –∫ —Ö–∏–ª–ª–∏–Ω–≥—É"]:
            dovs += "—Ö–∏–ª–ª–∏–Ω–≥—É, "
        len_dovs = len(dovs)
        dovs_accept = dovs[:len_dovs-2]

        dov_users = ', '.join(
            f'<code>@{i}</code>' for i in filter_and_users['users']
        )
        if not args:
            return await self.inline.form(
                self.strings("dov").format(
                    dov_users,
                    filter_and_users['filter'] or '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
                    '‚úÖ –ó–∞–ø—É—â–µ–Ω' if self.config["–í–∫–ª/–≤—ã–∫–ª"] else '‚ùé –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                    ent.first_name if len(ent.first_name) <= 12  else "–Ω–∏–∫",
                    dovs_accept if dovs_accept != "" else "–≤—Å—ë –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ üëå",
                    pref
                ),
                reply_markup={
                    "text": "–ó–∞–∫—Ä—ã—Ç—å",
                    "callback": self.inline__close,

                },
                message=message,
                disable_security=False
            )
        args = args.split(' ', maxsplit=1)
        if len(args) == 1 and not reply and args[0] != '–ø—É—Å–∫': # 
            return await utils.answer(message, 'ü§î –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?..')
        
        elif args[0] == '—Å–µ—Ç':
            try:
                user_id = args[1]
                if not user_id.isdigit():
                    return await message.reply(
                        self.strings("wrong_id")
                    )

            except Exception:
                user_id = str(reply.sender_id)
            
            if user_id in filter_and_users['users']:
                filter_and_users['users'].remove(user_id)
                return await message.reply(
                    self.strings("user_rm").format(
                        user_id
                    )
                )
            elif user_id not in filter_and_users['users']:
                filter_and_users['users'].append(user_id)
                return await message.reply(
                    self.strings("user_add").format(
                        user_id
                    )
                )

            return self.db.set("NumMod", "numfilter", filter_and_users)
        
        elif args[0] == '–Ω–∏–∫':
            try:
                filter_and_users['filter'] = args[1].lower().strip()
                self.db.set("NumMod", "numfilter", filter_and_users)
                return await message.reply(
                    self.strings("nick_add").format(
                        args[1]
                    )
                )
            except Exception:
                return await message.reply(
                    self.strings("wrong_nick")
                )

        
        elif args[0] == '–ø—É—Å–∫':
            if self.config["–í–∫–ª/–≤—ã–∫–ª"]:
                self.config["–í–∫–ª/–≤—ã–∫–ª"] = False
                return await message.reply(
                    self.strings("dov_stop")
                )

            else:
                self.config["–í–∫–ª/–≤—ã–∫–ª"] = True
                return await message.reply(
                    self.strings("dov_start")
                )

        else:
            return await message.reply(
                self.strings("dov.wrong_args")
            )

    async def message_q( # —Å–ø–∏–∑–∂–µ–Ω–æ –∏–∑ IrisLab
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        async with self.client.conversation(user_id, exclusive=False) as conv:
            msg = await conv.send_message(text)
            response = await conv.get_response()
            if mark_read:
                await conv.mark_read()

            if delete:
                await msg.delete()
                await response.delete()

            return response

    async def watcher(self, message):
        if not isinstance(message, telethon.tl.types.Message): return
        filter_and_users = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
        user_id = str(message.sender_id)
        sndr_id = message.sender_id
        
        nik = filter_and_users["filter"]
        text = message.raw_text.lower()
        reply = await message.get_reply_message()
        infList = self.db.get("NumMod", "infList")
        args = utils.get_args(message)
#############################################################     –ê–≤—Ç–æ –ó–∞—Ä–ª–∏—Å—Ç
        get_me = await message.client.get_me()
        timezone = "Europe/Kiev"
        vremya = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
        if re.search(r"–ø–æ–¥–≤–µ.{2,4} –∑–∞—Ä–∞–∂–µ–Ω–∏—é", text, flags=re.ASCII):
            if not self.config["–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤"]:
                return
            split_text, r_text, msg_text = "", "", ""
            try:
                msg_text = message.text
                split_text = msg_text.splitlines()
                r_text = reply.text
                
            except:
                pass
            irises = [
                5443619563, 
                707693258, 
                5226378684, 
                5137994780, 
                5434504334,
                1136703023
            ]
            if message.sender_id not in irises:
                return            
            attempts = "üóì –û—Ç—á—ë—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:"
            podverg = split_text[0] if attempts not in msg_text else split_text[3]
            retur = 0
            try:
                if podverg.startswith('ü¶† <a href="https://t.me/'):
                    y = podverg.index('https://t.me/') + 13
                    user3 = podverg[y:].split('"', maxsplit=1)[0]
                    if user3.lower() != get_me.username.lower():
                        return
                    retur = 1
                if podverg.startswith('ü¶† <a href="tg:'):
                    y = podverg.index('user?id=') + 8  
                    user3 = podverg[y:].split('"', maxsplit=1)[0]    
                    if get_me.id != user3:
                        return 
                    retur = 1
            except ValueError:
                pass
            if sndr_id not in irises:
                return await message.reply("—á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞")
            if not retur:
                return
            try:
                x = msg_text.index('‚ò£') + 4
                count = msg_text[x:].split(' ', maxsplit=1)[0]
                

                #if count == "1":
                #    return await message.reply("–æ–∫")

                x = msg_text.index('user?id=') + 8
                user = '@' + msg_text[x:].split('"', maxsplit=1)[0]
                ept = f"<s>+{infList[user][0]}</s>  " if user in infList else ""
                infList[user] = [str(count), vremya]
                self.db.set("NumMod", "infList", infList)
                await message.reply(self.strings("auto.save").format(user, ept, count))
            except ValueError:
                return
                #await message.reply(
                #    self.strings("nolink")
                #)
############################################################
        if re.fullmatch(r"–∏–¥\s@.{,32}", text, flags=re.ASCII):
            if str(sndr_id) != str(get_me.id):
                return
            user = 0
            if re.fullmatch(r"@\D\w{3,32}", args[0], flags=re.ASCII):
                user = await message.client.get_entity(args[0])
            
            elif re.fullmatch(r"@\d{4,14}", args[0], flags=re.ASCII):
                user = args[0].replace("@", "")
                user = await message.client.get_entity(int(user))
            if not user:
                return await message.reply("—Ç—ã –≤–≤–µ–ª —Ö—É–π–Ω—é —Ä–µ–∞–ª—å–Ω–æ")

            link = '<a href="t.me/{}">{}</a>'.format(user.username, user.first_name) if user.username else '<a href="tg://openmessage?user_id={}">{}</a>'.format(user.id, user.first_name)
            return await message.reply(
                f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
                f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
            )        

        if text == "–∏–¥":
            if str(sndr_id).lower() != str(get_me.id).lower():
                return
            reply = await message.get_reply_message()
            args = utils.get_args(message)
            if not reply:
                user = await message.client.get_entity(message.sender_id)
                link = f'<a href="t.me/{user.username}">{user.first_name}</a>' if user.username else f'<a href="tg://openmessage?user_id={user.id}">{user.first_name}</a>'
                return await message.reply(
                    f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
                    f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
                )
            user = await message.client.get_entity(reply.sender_id)
            link = f'<a href="t.me/{user.username}">{user.first_name}</a>' if user.username else f'<a href="tg://openmessage?user_id={user.id}">{user.first_name}</a>'
            return await message.reply(
                f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
                f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
            )
    
            user = 0
            if re.fullmatch(r"@\D\w{3,32}", args[0], flags=re.ASCII):
                user = await message.client.get_entity(args[0])
            
            elif re.fullmatch(r"@\d{4,14}", args[0], flags=re.ASCII):
                user = args[0].replace("@", "")

            if not user:
                return await message.reply("—Ç—ã –≤–≤–µ–ª —Ö—É–π–Ω—é —Ä–µ–∞–ª—å–Ω–æ")
            link = '<a href="t.me/{}">{}</a>'.format(user.username, user.first_name) if user.username else '<a href="tg://openmessage?user_id={}">{}</a>'.format(user.id, user.first_name)
            return await message.reply(
                f"<emoji document_id=5780683340810030158>‚úàÔ∏è</emoji> {link}\n"
                f"<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user.id}</code>"
            )
        if text == "–∂–¥":
            if str(sndr_id) != str(get_me.id):
                return
            if not reply:
                return await message.reply(
                    self.strings("no_zar_reply")
                )
            trueZ = '–ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é'
            trueZ2 = '–ø–æ–¥–≤–µ—Ä–≥–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏—é' # –¥–∞, —è –µ–±–ª–∞–Ω)
            text = reply.text
            if trueZ not in reply.text and trueZ2 not in reply.text:
                return await message.reply(
                    self.strings("wrong_zar_reply")
                )
            try:
                ept = ""
                text = reply.text
                x = text.index('‚ò£') + 4
                count = text[x:].split(' ', maxsplit=1)[0]
                x = text.index('user?id=') + 8
                user = '@' + text[x:].split('"', maxsplit=1)[0]
                infList[user] = [str(count), vremya]
                self.db.set("NumMod", "infList", infList)
                await message.reply(
                    self.strings("r.save").format(
                        user, count, ept
                    )
                )
            except ValueError:
                await message.reply(
                    self.strings("nolink")
                )

        if re.fullmatch(r"–∂–¥\s@\d{3,12}.{,10}", text, flags=re.ASCII):
            if str(sndr_id) != str(get_me.id):
                return            
            k = ''
            pas = 0
            try:
                user, count = str(args[0]), float(args[1])
            except Exception:
                try:
                    if "–∫" in args[1] or "k" in args[1] or "," in args:
                        count = args[1].replace("k", "").replace("–∫", "").replace(",", ".")
                        count = float(count)
                        user = str(args[0])
                        k += 'k'
                        pas = 1
                    else: 
                        return await message.reply(
                            self.strings("wrong_cmd")
                        )
                except: 
                    return await message.reply(
                        self.strings("wrong_cmd")
                    )                
            if re.fullmatch(r"@\D{3,32}\w{3,32}", user, flags=re.ASCII):
                get_id = await message.client.get_entity(user)
                get_id = get_id.id
                user = "@" + str(get_id)

            if '–∫' in args and pas == 0 or 'k' in args and pas == 0:
                k += "k"     
            infList[user] = [str(count) + k, vremya]
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("r.save").format(
                            user, count, k
                )
            )


        if text == "–∂—É":
            if str(sndr_id) != str(get_me.id):
                return
            if not reply:
                return
            user = "@" + str(reply.sender_id)
            if user not in infList:
                return await message.reply(
                    self.strings("nf")
                )
            del_zar = f"(+{infList[user][0]}) "
            infList.pop(user)
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("zar_rm").format(
                    args, del_zar
                )
            )

        if re.fullmatch(r"–∂—É\s@\d{3,12}", text, flags=re.ASCII):
            if str(sndr_id) != str(get_me.id):
                return
            user = "@" + text.split("@", maxsplit=1)[1]
            if user not in infList:
                return await message.reply(
                    self.strings("nf")
                )
            del_zar = f"(+{infList[user][0]}) "
            infList.pop(user)
            self.db.set("NumMod", "infList", infList)
            await message.reply(
                self.strings("zar_rm").format(
                    args, del_zar
                )
            )


        if text == "–∂–ª":
            if str(sndr_id) != str(get_me.id):
                return
            if not reply:
                return
            zhertva = "@" + str(reply.sender_id)
            if zhertva in infList:
                user = infList[zhertva]
                await message.reply(
                    self.strings("search").format(
                        zhertva, user[0], user[1]
                    )
                )
            if zhertva not in infList:   
                await message.reply(
                    self.strings("nf")
                )  
        if re.fullmatch(r"–∂–ª\s@\d{3,12}", text, flags=re.ASCII):
            if str(sndr_id) != str(get_me.id):
                return
            zhertva = "@" + text.split("@", maxsplit=1)[1]
            
            if zhertva in infList:
                user = infList[zhertva]
                await message.reply(
                    self.strings("search").format(
                        zhertva, user[0], user[1]
                    )
                )
            if zhertva not in infList:   
                await message.reply(
                    self.strings("nf")
                )  

        if not nik or not self.config["–í–∫–ª/–≤—ã–∫–ª"] or user_id not in filter_and_users['users']: 
            return
        if not text.startswith(nik): return
        
        if self.config["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º"] == True:  
            if send_mes–∞ := re.search(
                r"(?P<z>–±–µ–π\s|–∫—É—Å[—å–∞–π–Ω–∏]{,3}\s|–∑–∞—Ä–∞–∑–∏[—Ç—å—Ç—å]{,3}\s|–µ–±[–Ω–∏–∞–∂—à—å]{,3}\s|—É–µ–±[–∏–∞–æ—à—Ç—å]{,3}\s|–æ–ø—É—Å—Ç[–∏]{,2}\s|–æ—Ä–≥–∞–Ω–∏–∑—É–π –≥–æ—Ä—è—á–∫—É\s)(?P<lvl>[1-9]?[0]?\s)?(?P<link>@[0-9a-z_]+|(?:https?://)?t\.me/[0-9a-z_]+|tg://openmessage\?user_id=(?P<id>[0-9]+))",
                text, flags=re.ASCII
            ):
                
                send_mes–∞ = send_mes–∞.groupdict()
                send_mes–∞['link'], send_mes–∞['id'] = '@' + send_mes–∞['id'] if send_mes–∞['id'] else send_mes–∞['link'], ''
                send_mes–∞['z'] = '/–∑–∞—Ä–∞–∑–∏—Ç—å '
                send_mes–∞['lvl'] = send_mes–∞['lvl'] or ''
                mes = ''.join(send_mes–∞.values())
                await message.reply(mes)

            #if send_mes–∞ := re.search(
            #    r"(?P<eb>–±–µ–π\s|–µ–±\s)(?P<lvl>[1-9]?[0]?\s)", text):
            #    if text == f"{nik} –µ–±":
            #        if reply:
            #            popusk = reply.sender_id 
            #            send_mes–∞ = send_mes–∞.groupdict()
            #            send_mes–∞['z'] = '/–∑–æ—Ä–∞–∑–∏—Ç—å '
            #            send_mes–∞['lvl'] = send_mes–∞['lvl'] or ''
            #            send_mes–∞['id'] = popusk
            #            mes = ''.join(send_mes–∞.values())
            #            await message.reply(mes)






###### —á–µ–∫–∏
        if self.config["–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ"] == True:  
            if send_mes := re.search(r"(?P<ch>–∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5} —á–µ–∫[–Ω—É—Ç—å–∏–∞–π]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∑–∞—Ä–∞–∑[–∫—É–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['ch'] = '+–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
    
    
            elif send_mes := re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['pat'] = '+–ø–∞—Ç–æ–≥–µ–Ω '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<let>–ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –ª–µ—Ç–∞–ª[–∫–∞—å–Ω–æ—Å—Ç—å—É]{,5}\s)(?P<lvl>[1-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['let'] = '+–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<kvala>–∫–≤–∞–ª[–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è—É]{,8} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['kvala'] = '+–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<imun>—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4}\s|–∏–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–∏–º–º—É–Ω[–µ–∏—Ç–µ—Ç–∫–∞—É]{,4} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['imun'] = '+–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<sb>—Å–± —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—Å–ª—É–∂–±[–∞—É]{,2} —á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–ª—É–∂–±[–∞—É]{,2}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} –±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—á–µ–∫[–∞–π–Ω–∏—É—Ç—å]{,4} —Å–±\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['sb'] = '+–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
#### –∫–∞—á    –∞–ª–∫–∏
            elif send_mes := re.search(r"(?P<zar>–∑–∞—Ä–∞–∑[—É–∫–∞–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['zar'] = '++–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<pat>–ø–∞—Ç[–æ–≥–µ–Ω—ã]{,5}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['pat'] = '++–ø–∞—Ç–æ–≥–µ–Ω '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<let>–ª–µ—Ç–∞–ª[—É–∫–∞—å–Ω–æ—Å—Ç—å]{,5}\s)(?P<lvl>[1-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['let'] = '++–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<kvala>–∫–≤–∞–ª[—É–ª–∞–∏—Ñ–∏–∫–∞—Ü–∏—è]{,8}\s|—Ä–∞–∑—Ä–∞–±[–æ—Ç–∫–∞—É]{,4}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['kvala'] = '++–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<imun>–∏–º–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}|–∏–º—É–Ω[—É–µ–∏—Ç–µ—Ç–∫–∞]{,4}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['imun'] = '++–∏–º–º—É–Ω–∏—Ç–µ—Ç '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            elif send_mes := re.search(r"(?P<sb>—Å–±\s|–±–µ–∑–æ–ø–∞—Å–Ω–æ[—Å—Ç—å]{,3}\s|—Å–ª—É–∂–±[–∞—É]{,2}\s)(?P<lvl>[0-5]+)", text, flags=re.ASCII):
                send_mes = send_mes.groupdict()
                send_mes['sb'] = '++–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                send_mes['lvl'] = send_mes['lvl'] or ''
                mes = ''.join(send_mes.values())
                await message.reply(mes)
            
        if self.config["–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º"] == True:  
            if re.search(r"–±–æ–ª[–µ–∑—å–Ω–∏]{,5}\b", text, flags=re.ASCII):
                await message.reply('/–º–æ–∏ –±–æ–ª–µ–∑–Ω–∏')
        
        if self.config["–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º"] == True:  
            if re.search(r"–∂–µ—Ä—Ç–≤[—ã–∞—É]{,2}|–µ–∂[–∞—É]{,2}", text, flags=re.ASCII):
                await message.reply('/–º–æ–∏ –∂–µ—Ä—Ç–≤—ã')

        if self.config["–î–æ—Å—Ç—É–ø –∫ –≤–∏—Ä—É—Å–∞–º"] == True:  
            if re.search(r"-–≤–∏—Ä—É—Å[—ã–∞]{,2}", text):
                await message.reply('-–≤–∏—Ä—É—Å—ã')
            if re.search(r"—É–≤–µ–¥[—ã–∞–æ–º–ª–µ–Ω–∏—è]{,8}", text, flags=re.ASCII):
                await message.reply('+–≤–∏—Ä—É—Å—ã')
        
        if self.config["–î–æ—Å—Ç—É–ø –∫ —Ö–∏–ª–ª–∏–Ω–≥—É"] == True:    
            if re.search(r"–≤–∞–∫[—Ü–∏–Ω–∞—É]{,3}|–ª–µ—á[–∏—Å—å]{,2}|—Ö–∏[–ª–ª—å—Å—è–π–∏–Ω–≥]{,2}|–ª–µ–∫[–∞—Ä—Å—Ç–≤–æ]{,2}", text, flags=re.ASCII):
                await message.reply('/–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É')
            if re.search(r"—Ü–µ–Ω[–∞—É]{,2}|–≤—á[–µ–∫]{,2}", text):
                await message.reply('<i>–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É</i>')
        toxt = text.replace(f"{nik} ", "")
        if self.config["–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ"] == True:
            #if re.search(r"" + nik + "%–ª–∞–±[—É–∞]{,2}|/–ª–∞–±[—É–∞]{,2}|#–ª–∞–±[—É–∞]{,2}", text, flags=re.ASCII):
            #    await message.reply('üëá')
            #    await message.respond('/–º–æ—è –ª–∞–±–∞')

            if re.fullmatch(r"–ª–∞–±[–∞—É]{,2}", toxt, flags=re.ASCII): # —Ä–µ–≥—É–ª—è—Ä–∫–∞
                lab_raw = await self.message_q( # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç
                    f"/–ª–∞–±",
                    5443619563,
                    mark_read=True,
                    delete=True,
                )
                lab_lines = lab_raw.text.splitlines() # —Ç–µ–∫—Å—Ç —Å –ª–∞–±–æ–π, —Ä–∞–∑–±–∏—Ç—ã–π –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                if "üî¨ –î–æ—Å—å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏" not in lab_lines[0]:
                    return
                sms = ""
                for i in lab_lines: # —Ü–∏–∫–ª for –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ —Ç–µ–∫—Å—Ç–µ –ª–∞–±—ã
                    if "üß™ –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤:" in i:
                        sms += f"{i}\n"
                    if "‚è± –ù–æ–≤—ã–π –ø–∞—Ç–æ–≥–µ–Ω:" in i:
                        sms += f"{i}\n"
                    if "‚ò£Ô∏è –ë–∏–æ-–æ–ø—ã—Ç:" in i:
                        sms += f"{i}\n"
                    if "üß¨ –ë–∏–æ-—Ä–µ—Å—É—Ä—Å:" in i:
                        sms += f"{i}\n"
                    if "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é" in i:
                        s = i.replace("‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é ", "")
                        sms += f"ü§í –ì–æ—Ä—è—á–∫–∞ –æ—Ç {s}\n"
                    if "‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë" in i:
                        s = i.replace("‚ùóÔ∏è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–æ—Ä—è—á–∫–∏ –µ—â—ë ", "")
                        sms += f"ü§í –ì–æ—Ä—è—á–∫–∞ –Ω–∞ {s}\n"                        
                await message.reply(sms) # –æ—Ç–≤–µ—Ç

#######################################################
        if self.config["–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–ª–∏—Å—Ç—É"] == True:
            reply = await message.get_reply_message()
            infList = self.db.get("NumMod", "infList")
            timezone = "Europe/Kiev"
            vremya = datetime.now(pytz.timezone(timezone)).strftime("%d.%m")
            with contextlib.suppress(Exception):
                text_list = text.split(' ', maxsplit=2)
            
            if re.search(r"(?P<zarlist>–∑\s)(?P<link>@[0-9a-z_]+|tg://openmessage\?user_id=[0-9]+)",
                text, flags=re.ASCII):
                if not text.startswith(f"{nik} –∑") and not text.startswith(f"{nik}–∑"):
                    return
    
                if text_list[2] in infList:
                    user = infList[text_list[2]]
                    await message.reply(
                        self.strings("search").format(
                            text_list[2], user[0], user[1]
                        )
                    )
                if text_list[2] not in infList:
                    await message.reply(
                        self.strings("nf")
                    )
                else:
                    return
            
            if re.search(r"–∑", text, flags=re.ASCII):
                if text != f"{nik} –∑" and text != f"{nik}–∑":
                    return
                zhertva = '@' + str(reply.sender_id)

                
                if not reply:
                    return
                
                if re.fullmatch(r"@\d{5,11}", reply.text, flags=re.ASCII):
                    zhertva = reply.text

                if re.fullmatch(r".{,5}–∑–∞—Ä–∞–∑–∏—Ç—å @\d{5,11}", reply.text.lower(), flags=re.ASCII):
                    zhertva = "@" + str(reply.text.split("@")[1])

                if re.fullmatch(r".{,5}–∑–∞—Ä–∞–∑–∏—Ç—å @\d{5,11}", reply.text.lower(), flags=re.ASCII):
                    zhertva = "@" + str(reply.text.split("@")[1])

                if re.fullmatch(r".{,5}–∑–∞—Ä–∞–∑–∏[—Ç—å\s..]+ @\D\w{3,32}", reply.text.lower(), flags=re.ASCII):
                    user = "@" + str(reply.text.split("@")[1])
                    get_id = await message.client.get_entity(user)
                    get_id = get_id.id
                    zhertva = "@" + str(get_id)

                if re.fullmatch(r".{,5}–∑–∞—Ä–∞–∑–∏[—Ç—å\s..]+ @\D\w{3,32}", reply.text.lower(), flags=re.ASCII):
                    user = "@" + str(reply.text.split("@")[1])
                    get_id = await message.client.get_entity(user)
                    get_id = get_id.id
                    zhertva = "@" + str(get_id)



                if zhertva in infList:
                    user = infList[zhertva]
                    await message.reply(
                        self.strings("search").format(
                            zhertva, user[0], user[1]
                        )
                    )              
                        
                elif zhertva not in infList:
                        await message.reply(
                            self.strings("nf")
                        )  
                else:
                    return
            
            if re.search(r"—Å–±", text, flags=re.ASCII):
                if text != f"{nik} —Å–±" and text != f"{nik}—Å–±":
                    return
                try:
                    reply = await message.get_reply_message()
                    txxxt = reply.text
                    org = "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä"
                    txxt = txxxt.splitlines()
                    zhertva = "none"
                except: 
                    pass
                
                for i in txxt:
                    if i.startswith(org):
                        b = i.find('href="') + 6
                        c = i.find('">')
                        link = i[b:c]                        
                        
                        if link.startswith("tg"):
                            zhertva = '@' + link.split('=')[1]
                        
                        if link.startswith("https://t.me"):
                            try:
                                userk = str(link.split('/')[3])
                                uebok = "@" + str(userk)
                                get_id = await message.client.get_entity(uebok)
                                get_id1 = get_id.id
                                zhertva = "@" + str(get_id1)
                            except:
                                return await message.reply("—Ñ–ª—É–¥–≤–µ–π—Ç, –∏—â–∏ –ø–æ –∞–π–¥–∏")

                        if zhertva in infList:
                            user = infList[zhertva]
                            await message.reply(
                                self.strings("search").format(
                                    zhertva, user[0], user[1]
                                )
                            )                             
                        elif zhertva not in infList:
                            await message.reply(
                                self.strings("nf")
                            ) 
            if re.search(r"–±–∏–æ", text, flags=re.ASCII):
                if text != f"{nik} –±–∏–æ" and text != f"{nik}–±–∏–æ":
                    return
                reply = await message.get_reply_message()
                args = utils.get_args_raw(message)
                if not reply:
                    return
                bt, bch, bk, btz, bchz, ezha, bol = "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:","üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ë–ï–°–ï–î–´ –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:","üî¨ –¢–û–ü –ö–û–†–ü–û–†–ê–¶–ò–ô –ü–û –ó–ê–†–ê–ñ–ï–ù–ò–Ø–ú:","üî¨ –¢–û–ü –ë–û–õ–ï–ó–ù–ï–ô:","üî¨ –¢–û–ü –ë–û–õ–ï–ó–ù–ï–ô –ë–ï–°–ï–î–´:","ü¶† –°–ø–∏—Å–æ–∫ –±–æ–ª—å–Ω—ã—Ö –≤–∞—à–∏–º –ø–∞—Ç–æ–≥–µ–Ω–æ–º:","ü§í –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π:"
                
                infList = self.db.get("NumMod", "infList")

                a = reply.text
                sms = ''
                if "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ë–ï–°–ï–î–´" in a:
                    sms += "ü•∞ —Ç–æ–ø –≤–∫—É—Å–Ω—è—à–µ–∫ —á–∞—Ç–∞:\n"
                    
                if "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û" in a:
                    sms += "üî¨ –¢O–ü –õ–ê–ë–û–†–ê–¢O–†–ò–ô –ü–û –ë–òO-–û–ü–´–¢–£ –ó–ê–†A–ñ–Å–ù–ù–´–•:\n" #–¢O–ü –ò–ú–ú–£–ù–û–î–†–û–ß–ï–†–û–í:
        
                if bt not in a and bch not in a and bk not in a and btz not in a and bchz not in a and ezha not in a and bol not in a:
                    return 
                b = reply.raw_text.splitlines() 
                b.pop(0)
                hh = []
                for i in b:
                    try:
                        hh.append(i.split('|')[1])
                    except: pass
                json = JSON.loads(reply.to_json())
                
                count = 1
                for i in range(0, len(reply.entities) ):
                    try:
                        exp = hh[i]
                    except:
                        exp = i
                    link = json["entities"][i]["url"]
                    try:
                        if link.startswith('tg'):
                            bla = []
                            for i in link.split('='):
                                bla.append(i)
                            b = await message.client.get_entity(int(bla[1]))
                            
                            b_first_name1 = utils.remove_html(utils.validate_html(utils.escape_html(b.first_name)))
        
                            b_first_name2 = b_first_name1.replace("|", "/")
        
                            b_final = "<a href='tg://openmessage?user_id={0}'>{1}</a>".format(b.id, b_first_name2)
                            
                            
                            zh = ''
                            b_id = "@" + bla[1]
                            if b_id in infList:
                                user = infList[b_id]
                                zh = f"(+{user[0]}) "
        
        
                            sms += f'{str(count)}. {b_final} {zh}| {exp} | <code>@{b.id}</code>\n'
                        
                        elif link.startswith('https://t.me'):
                            a = '@' + str(link.split('/')[3])
                            sms += f'{str(count)}. <code>{a}</code> | <u>{result}</u>\n'
                        else:
                            sms += f'{str(count)}. —á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?\n'
                    except:
                        if link.startswith('https://t.me'):
                            a ='@' + str(link.split('/')[3])
                            sms += f'{str(count)}. <code>{a}</code> | <u>{exp}</u> \n'
                        elif link.startswith('tg'):
                            bla = []
                            for i in link.split('='):
                                bla.append(i)
                            blya = "<a href='tg://openmessage?user_id={0}'>???</a>".format(bla[1])
                            zh = ''
                            b_id = "@" + bla[1]
                            if b_id in infList:
                                user = infList[b_id]
                                zh = f"(+{user[0]}) "
                            sms += f'{str(count)}. {blya} {zh}| {exp} | <code>@{bla[1]}</code>  \n'
                    count += 1
        
                try:
                    await self.inline.form(
                        sms,
                        reply_markup={
                                        "text": f"üîª Close",
                                        "callback": self.inline__close,
                        },
                        message=message,
                        disable_security=False
                    )
                except:
                    await message.reply(sms) 
            
#######################################################

###     
    async def –≥cmd(self, message):
        """
[arg] [arg] [arg]....
–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /–∏–¥ –ø–æ —Ä–µ–ø–ª–∞—é.
–ê—Ä–≥—É–º–µ–Ω—Ç–æ–º —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞ –∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å—Ç—Ä–æ–∫–∏.
        """
        
        reply = await message.get_reply_message()
        
        count_st = 0
        count_hf = 0
        if not reply:
            await message.reply(
                self.strings("not_reply")
            )
            return

        args = utils.get_args_raw(message)
        list_args=[]
        if not args:
            await message.reply(
                self.strings("not_args")
            )
            return
        a = reply.text
        for i in args.split(' '):
            if '-' in i:
                ot_do = i.split('-')
                try:
                    for x in range(int(ot_do[0]),int(ot_do[1])+1):
                        list_args.append(str(x))
                except:
                    await message.reply(
                        self.strings("ot_do")
                    )
                    return
            else:
                list_args.append(i)
        lis = []
        for i in a.splitlines():
            lis.append(i)
        for start in list_args:
            for x in lis:
                if x.lower().startswith(str(start.lower())):
                    count_st = 1
                    if 'href="' in x:
                        count_hf = 1
                        b=x.find('href="')+6
                        c=x.find('">')
                        link = x[b:c]
                        if link.startswith('tg'):
                            list = []
                            for i in link.split('='):
                                list.append(i)
                            await message.reply(f'/id <code>@{list[1]}</code>'
                            )
                            break
                        elif link.startswith('https://t.me'):
                            a ='@' + str(link.split('/')[3])
                            await message.reply(f'/id <code>{a}</code>'
                            )
                            break
                        else:
                            await message.reply(
                                self.strings("hueta")
                            )
                            break
            await asyncio.sleep(3)
        if not count_st:
            await message.reply(
                self.strings("no_sargs")
            )
        elif not count_hf:
            await message.reply(
                self.strings("nolink")
            )
        elif len(list_args) >= 5:
            await message.respond(
                self.strings("tids")
            )
            await asyncio.sleep(3.3)


    async def –∏cmd(self, message):
        """
–ß–µ–∫–∞–µ—Ç –≤—Å–µ –∞–π–¥–∏ –ø–æ —Ä–µ–ø–ª–∞—é.
–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å @id/@user/link
        """
        reply = await message.get_reply_message()
        if not reply:
            await message.reply(
                self.strings("not_reply")
            )
            return
        json = JSON.loads(reply.to_json())
        for i in range(len(reply.entities)):
            try:
                link = json["entities"][i]["url"]
                if link.startswith('tg'):
                    users = '@' + link.split('=')[1]
                    await message.reply(f'!id {users}')
                elif link.startswith('https://t.me'):
                    a = '@' + str(link.split("/")[3])
                    await message.reply(f'!id {a}')
                else:
                    await message.reply(
                        self.strings("hueta")
                    )
            except Exception:
                hueta = validate_text(reply.raw_text)
                
                blayt = hueta[json["entities"][i]["offset"]:json["entities"][i]["offset"] + json["entities"][i]["length"]]
                await message.reply(f"!id <code>{blayt}</code>")
            await asyncio.sleep(3.3)
    
    async def –±cmd(self, message):
        """
–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –±–∏–æ—Ç–æ–ø—ã/–∂–µ—Ä—Ç–≤—ã –∏ —Ç.–ø
        """
        reply = await message.get_reply_message()
        args = utils.get_args_raw(message)
        infList = self.db.get("NumMod", "infList")
        
        a = reply.text
        b = reply.raw_text.splitlines()
        
        if not reply:
            await message.edit(
                self.strings("not_reply")
               )
            return

        sms = ''
        if "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ë–ï–°–ï–î–´" in a:
            sms += "ü•∞ —Ç–æ–ø –≤–∫—É—Å–Ω—è—à–µ–∫ —á–∞—Ç–∞:\n"
            
        if "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û" in a:
            sms += "üî¨ –¢O–ü –õ–ê–ë–û–†–ê–¢O–†–ò–ô –ü–û –ë–òO-–û–ü–´–¢–£ –ó–ê–†A–ñ–Å–ù–ù–´–•:\n" #–¢O–ü –ò–ú–ú–£–ù–û–î–†–û–ß–ï–†–û–í:

        not_hueta = [
            "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:",
            "üî¨ –¢–û–ü –õ–ê–ë–û–†–ê–¢–û–†–ò–ô –ë–ï–°–ï–î–´ –ü–û –ë–ò–û-–û–ü–´–¢–£ –ó–ê–†–ê–ñ–Å–ù–ù–´–•:",
            "üî¨ –¢–û–ü –ö–û–†–ü–û–†–ê–¶–ò–ô –ü–û –ó–ê–†–ê–ñ–ï–ù–ò–Ø–ú:",
            "üî¨ –¢–û–ü –ë–û–õ–ï–ó–ù–ï–ô:",
            "üî¨ –¢–û–ü –ë–û–õ–ï–ó–ù–ï–ô –ë–ï–°–ï–î–´:",
            "ü¶† –°–ø–∏—Å–æ–∫ –±–æ–ª—å–Ω—ã—Ö –≤–∞—à–∏–º –ø–∞—Ç–æ–≥–µ–Ω–æ–º:",
            "ü§í –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π:"
        ]

        if b[0] not in not_hueta: 
            await message.respond(
                self.strings("hueta")
            )
            return 
        get_me = await message.client.get_me()
        emojis = [
            "<emoji document_id=5219806684066618617>üçé</emoji>",
            "<emoji document_id=5215493819641895305>üöõ</emoji>",
            "<emoji document_id=5213452215527677338>‚è≥</emoji>",
            "<emoji document_id=5213107179329953547>‚è∞</emoji>",
            "<emoji document_id=5314775862749438888>üî†</emoji>",
            "<emoji document_id=5316939156172053790>üü™</emoji>",
            "<emoji document_id=5314362416312623719>üîù</emoji>",
            "<emoji document_id=5316567190529384159>ü§î</emoji>"
        ]
        emoji = f"{random.choices(emojis, k=1)[0]} " if get_me.premium else ""

        hiunya = [
            f"{emoji}<b>—â–∞—Å –µ–±–∞–Ω—ë—Ç)...</b> {utils.ascii_face()}",
            f"{emoji}<b>–≤–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞...</b> {utils.ascii_face()}",
            f"{emoji}<b>–¥–æ–∑–∞ –≥–µ—Ä–æ–∏–Ω–∞ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –≤ –∫—Ä–æ–≤—å...</b> {utils.ascii_face()}"
        ]
        msg = f"{emoji}<b>Loading... {utils.ascii_face()}<b>"
        if random.randint(1, 100) > 95:
            msg = random.choices(hiunya, k=1)[0]
        await utils.answer(message, msg)
        b.pop(0)
        hh = []
        for i in b:
            try:
                hh.append(i.split('|')[1])
            except: pass
        json = JSON.loads(reply.to_json())
        
        count = 1
        for i in range(0, len(reply.entities) ):
            exp = ""
            try:
                exp = hh[i]
            except:
                exp = i
            link = json["entities"][i]["url"]
            if link.startswith('tg'):
                bla = []
                for i in link.split('='):
                    bla.append(i)   
                b_id = "@" + bla[1]
                zh = f"(+{infList[b_id][0]}) " if b_id in infList else ""
                
                try:
                    b = await message.client.get_entity(int(bla[1]))
                    name = utils.remove_html(utils.validate_html(b.first_name))
                    name = f"<a href='tg://openmessage?user_id={b.id}'>{name}</a>"
                    sms += f'{str(count)}. {name} {zh}| {exp} | <code>@{b.id}</code>\n'
                except:
                    blya = "<a href='tg://openmessage?user_id={0}'>???</a>".format(bla[1])
                    sms += f'{str(count)}. {blya} {zh}| {exp} | <code>@{bla[1]}</code>\n'
            
            elif link.startswith('https://t.me'):
                a = '@' + str(link.split('/')[3])
                try:    
                    sms += f'{str(count)}. <code>{a}</code> | <u>{result}</u>\n'
                except:
                    sms += f'{str(count)}. <code>{a}</code> | <u>{exp}</u>\n'
            else:
                sms += f'{str(count)}. —á—Ç–æ –∑–∞ —Ö—É–µ—Ç–∞?\n'
            count += 1
        
        await self.inline.form(
            sms,
            reply_markup={
                            "text": f"üîª Close",
                            "callback": self.inline__close,
            },
            message=message,
            disable_security=False
        )
        

### –ø–æ–º–æ—â—å
    async def biohelpcmd(self, message: Message):
        """
–í—ã–¥–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é
        """
        
        pref = self.get_prefix()
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        args = args.lower()
 
#######################   
        if args == '–¥–æ–≤':
            nnik = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
            nik = nnik['filter'] or '–Ω–∏–∫' 
            await self.inline.form(
                self.strings("guidedov").format(
                    nik, pref
                ),
                reply_markup={
                    "text": "–ó–∞–∫—Ä—ã—Ç—å",
                    "callback": self.inline__close,

                },
                message=message,
                disable_security=False
            )   
        elif args == "–∑–∞—Ä–ª–∏—Å—Ç":
            nnik = self.db.get("NumMod", "numfilter", {'users': [], 'filter': None, 'status': False})
            nik = nnik['filter'] or '–Ω–∏–∫' 
            await self.inline.form(
                self.strings("zarlistHelp").format(
                    pref, nik
                ),
                reply_markup={
                    "text": "–ó–∞–∫—Ä—ã—Ç—å",
                    "callback": self.inline__close,

                },
                message=message,
                disable_security=False
            )
        else:
            await self.inline.form(
                self.strings("guide").format(
                        pref
                ),
                reply_markup={
                                "text": "–ó–∞–∫—Ä—ã—Ç—å",
                                "callback": self.inline__close,
                },
            message=message,
            disable_security=False
            )
    async def inline__close(self, call) -> None:
        await call.delete()

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ",
                False,
                "–î–æ—Å—Ç—É–ø –∫ –ª–∞–±–µ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–∞–∂–µ–Ω–∏—è–º",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ –∑–∞—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ",
                False,
                "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∫–∞—á–∫–µ –Ω–∞–≤—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –∑–∞—Ä–ª–∏—Å—Ç—É",
                False,
                "–î–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç–µ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –∂–µ—Ä—Ç–≤–∞–º —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–∑–Ω—è–º —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),

            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ –≤–∏—Ä—É—Å–∞–º",
                False,
                "–î–æ—Å—Ç—É–ø –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∏—Ä—É—Å–æ–≤ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∫—É",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–î–æ—Å—Ç—É–ø –∫ —Ö–∏–ª–ª–∏–Ω–≥—É",
                True,
                "–î–æ—Å—Ç—É–ø –∫ –ø–æ–∫—É–ø–∫–µ –≤–∞–∫—Ü–∏–Ω—ã",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–í–∫–ª/–≤—ã–∫–ª",
                False,
                "–í–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∫–∏"
                "\n‚ùóÔ∏è –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö Num'–º–æ–¥—É–ª—è—Ö.",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤",
                True,
                "–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤ –≤ –∑–∞—Ä–ª–∏—Å—Ç.",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "inline bot for –±",
                False,
                "[BETA] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –±–æ—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –±",
                validator=loader.validators.Boolean(),
            )
        )